/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client_;

import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Benutzer
 */
public class SearchCreditProduct extends javax.swing.JFrame {
    
private Map<String, CreditProduct> map=new HashMap<String,CreditProduct>();
    /**
     * Creates new form SearchCreditProduct
     */
    public SearchCreditProduct() throws UnknownHostException, IOException, ClassNotFoundException {
        initComponents();
        
        Socket sock = new Socket(InetAddress.getByName("localhost"), 1024);
            
            OutputStream output = sock.getOutputStream();
            InputStream input =sock.getInputStream();
            
            ObjectOutputStream objoutput=new ObjectOutputStream(output);
            ObjectInputStream objinput=new ObjectInputStream(input);
            
            objoutput.writeObject(4);
            
            int size=(int)objinput.readObject();
            
            for(int i=0;i<size;i++){
                CreditProduct credit=new CreditProduct();
                credit.setName_of_product((String) objinput.readObject());
                credit.setMaturity_date((int) objinput.readObject());
                credit.setInitial_amount((double) objinput.readObject());
                credit.setInterest_rate((double) objinput.readObject());
                credit.setRecurring_payments((double) objinput.readObject());
                credit.setEarly_repayment((boolean)objinput.readObject());
                map.put(credit.getName_of_product(),credit);
            }
            
            DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
            
            for(CreditProduct obj: map.values()){               
            model.addRow(new Object[]{obj.getName_of_product(),obj.getMaturity_date(),
                obj.getInitial_amount(),obj.getInterest_rate(),obj.getRecurring_payments(),obj.isEarly_repayment()});            
            }
            
            objinput.close();
            objoutput.close();
            output.close();
            input.close();
            sock.close();
            
            jTable1.setAutoCreateRowSorter (true);
    jTable1.getTableHeader ().setToolTipText("Нажмите на название столбца для сортировки");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Параметрезированный поиск");

        jTable1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Наименование кредитного продукта", "Срок погашения(дней)", "Начальная сумма(BYR)", "Процентная ставка(%)", "Размер периодических платежей(BYR)", "Возможность досрочного погашения"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        jTextField1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel1.setText("Наименование кредитного продукта");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel2.setText("Срок погашения(дней)");

        jTextField2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel3.setText("Начальная сумма( BYR)");

        jTextField3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel4.setText("Процентная ставка(%)");

        jTextField4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N

        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jButton1.setText("Поиск");
        jButton1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton2.setText("Назад");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 0, 0));

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel6.setText("Выбирите поля для поиска");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(397, 397, 397))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(130, 130, 130)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jTextField4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jTextField2)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(64, 64, 64)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox4)
                            .addComponent(jCheckBox3)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jCheckBox2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jCheckBox1)))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 148, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(133, 133, 133))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(99, 99, 99))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel6)))
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(38, 38, 38)
                .addComponent(jLabel2)
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBox2))
                        .addGap(32, 32, 32)
                        .addComponent(jLabel3))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBox3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       
        boolean flag=true;
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        model.setRowCount(0);
        jLabel5.setText("");
        
        if(jTextField1.getText().equals("") && jTextField2.getText().equals("") && jTextField3.getText().equals("") &&
                jTextField4.getText().equals("")){
            flag =false;
        }
        
        if(flag){
            
            flag=false;
            
            for(CreditProduct obj:map.values()){
                
                String name=jTextField1.getText();
                int maturity_date = -1;
                double initial_amount = -1;
                double interest_rate = -1;
                
                
                if(!jTextField2.getText().equals("")){
                maturity_date=Integer.parseInt(jTextField2.getText());
                }
                if(!jTextField3.getText().equals("")){
                initial_amount = Double.parseDouble(jTextField3.getText());
                }
                if(!jTextField4.getText().equals("")){
                interest_rate = Double.parseDouble(jTextField4.getText());
                }
                
                int result = 0;
                
                
                if(jCheckBox1.isSelected() && !jCheckBox2.isSelected() && !jCheckBox3.isSelected() && !jCheckBox4.isSelected())result=1;
                if(!jCheckBox1.isSelected() && jCheckBox2.isSelected() && !jCheckBox3.isSelected() && !jCheckBox4.isSelected())result=2;
                if(!jCheckBox1.isSelected() && !jCheckBox2.isSelected() && jCheckBox3.isSelected() && !jCheckBox4.isSelected())result=3;
                if(!jCheckBox1.isSelected() && !jCheckBox2.isSelected() && !jCheckBox3.isSelected() && jCheckBox4.isSelected())result=4;
                
                if(jCheckBox1.isSelected() && jCheckBox2.isSelected() && !jCheckBox3.isSelected() && !jCheckBox4.isSelected())result=5;
                if(jCheckBox1.isSelected() && jCheckBox2.isSelected() && jCheckBox3.isSelected() && !jCheckBox4.isSelected())result=6;
                if(jCheckBox1.isSelected() && jCheckBox2.isSelected() && jCheckBox3.isSelected() && jCheckBox4.isSelected())result=7;
                
                if(jCheckBox1.isSelected() && !jCheckBox2.isSelected() && jCheckBox3.isSelected() && !jCheckBox4.isSelected())result=8;
                if(jCheckBox1.isSelected() && !jCheckBox2.isSelected() && !jCheckBox3.isSelected() && jCheckBox4.isSelected())result=9;
                if(jCheckBox1.isSelected() && !jCheckBox2.isSelected() && jCheckBox3.isSelected() && jCheckBox4.isSelected())result=10;
                if(jCheckBox1.isSelected() && jCheckBox2.isSelected() && !jCheckBox3.isSelected() && jCheckBox4.isSelected())result=11;
                
                if(!jCheckBox1.isSelected() && jCheckBox2.isSelected() && jCheckBox3.isSelected() && !jCheckBox4.isSelected())result=12;
                if(!jCheckBox1.isSelected() && jCheckBox2.isSelected() && !jCheckBox3.isSelected() && jCheckBox4.isSelected())result=13;
                if(!jCheckBox1.isSelected() && !jCheckBox2.isSelected() && jCheckBox3.isSelected() && jCheckBox4.isSelected())result=14;
                if(!jCheckBox1.isSelected() && jCheckBox2.isSelected() && jCheckBox3.isSelected() && jCheckBox4.isSelected())result=15;
                
                if(result>0){
                switch(result){
                    case 1:{
                        if(obj.getName_of_product().equals(name)){
                            model.addRow(new Object[]{obj.getName_of_product(),obj.getMaturity_date(),
                obj.getInitial_amount(),obj.getInterest_rate(),obj.getRecurring_payments()});
                                flag=true;
                                continue;
                        }
                    } 
                    case 2:{
                        if(obj.getMaturity_date()==maturity_date){
                            model.addRow(new Object[]{obj.getName_of_product(),obj.getMaturity_date(),
                obj.getInitial_amount(),obj.getInterest_rate(),obj.getRecurring_payments()});
                                flag=true;
                                continue;
                        }
                    }
                    case 3:{
                        if(obj.getInitial_amount()==initial_amount){
                            model.addRow(new Object[]{obj.getName_of_product(),obj.getMaturity_date(),
                obj.getInitial_amount(),obj.getInterest_rate(),obj.getRecurring_payments()});
                                flag=true;
                                continue;
                        }
                    }
                    case 4:{
                        if(obj.getInterest_rate()==interest_rate){
                            model.addRow(new Object[]{obj.getName_of_product(),obj.getMaturity_date(),
                obj.getInitial_amount(),obj.getInterest_rate(),obj.getRecurring_payments()});
                                flag=true;
                                continue;
                        }
                    }
                    case 5:{
                        if(obj.getName_of_product().equals(name) && obj.getMaturity_date()==maturity_date){
                            model.addRow(new Object[]{obj.getName_of_product(),obj.getMaturity_date(),
                obj.getInitial_amount(),obj.getInterest_rate(),obj.getRecurring_payments()});
                                flag=true;
                                continue;
                        }
                    }  
                    case 6:{
                        if(obj.getName_of_product().equals(name) && obj.getInitial_amount()==initial_amount){
                            model.addRow(new Object[]{obj.getName_of_product(),obj.getMaturity_date(),
                obj.getInitial_amount(),obj.getInterest_rate(),obj.getRecurring_payments()});
                                flag=true;
                                continue;
                        }
                    }   
                    case 7:{
                        if(obj.getName_of_product().equals(name) && obj.getInterest_rate()==interest_rate){
                            model.addRow(new Object[]{obj.getName_of_product(),obj.getMaturity_date(),
                obj.getInitial_amount(),obj.getInterest_rate(),obj.getRecurring_payments()});
                                flag=true;
                                continue;
                        }
                    }   
                    case 8:{
                        if(obj.getName_of_product().equals(name) && obj.getInitial_amount()==initial_amount){
                            model.addRow(new Object[]{obj.getName_of_product(),obj.getMaturity_date(),
                obj.getInitial_amount(),obj.getInterest_rate(),obj.getRecurring_payments()});
                                flag=true;
                                continue;
                        }
                    }    
                    case 9:{
                        if(obj.getName_of_product().equals(name) && obj.getInterest_rate()==interest_rate){
                            model.addRow(new Object[]{obj.getName_of_product(),obj.getMaturity_date(),
                obj.getInitial_amount(),obj.getInterest_rate(),obj.getRecurring_payments()});
                                flag=true;
                                continue;
                        }
                    } 
                    case 10:{
                        if(obj.getName_of_product().equals(name) && obj.getInterest_rate()==interest_rate 
                                && obj.getInitial_amount()==initial_amount){
                            model.addRow(new Object[]{obj.getName_of_product(),obj.getMaturity_date(),
                obj.getInitial_amount(),obj.getInterest_rate(),obj.getRecurring_payments()});
                                flag=true;
                                continue;
                        }
                    }  
                    case 11:{
                        if(obj.getName_of_product().equals(name) && obj.getInterest_rate()==interest_rate 
                                && obj.getMaturity_date()==maturity_date){
                            model.addRow(new Object[]{obj.getName_of_product(),obj.getMaturity_date(),
                obj.getInitial_amount(),obj.getInterest_rate(),obj.getRecurring_payments()});
                                flag=true;
                                continue;
                        }
                    }       
                    case 12:{
                        if(obj.getInitial_amount()==initial_amount  && obj.getMaturity_date()==maturity_date){
                            model.addRow(new Object[]{obj.getName_of_product(),obj.getMaturity_date(),
                obj.getInitial_amount(),obj.getInterest_rate(),obj.getRecurring_payments()});
                                flag=true;
                                continue;
                        }
                    }                 
                    case 13:{
                        if(obj.getInterest_rate()==interest_rate  && obj.getMaturity_date()==maturity_date){
                            model.addRow(new Object[]{obj.getName_of_product(),obj.getMaturity_date(),
                obj.getInitial_amount(),obj.getInterest_rate(),obj.getRecurring_payments()});
                                flag=true;
                                continue;
                        }
                    }               
                    case 14:{
                        if(obj.getInterest_rate()==interest_rate  && obj.getInitial_amount()==initial_amount){
                            model.addRow(new Object[]{obj.getName_of_product(),obj.getMaturity_date(),
                obj.getInitial_amount(),obj.getInterest_rate(),obj.getRecurring_payments()});
                                flag=true;
                                continue;
                        }
                    }
                    case 15:{
                        if(obj.getInterest_rate()==interest_rate  && obj.getInitial_amount()==initial_amount 
                                && obj.getMaturity_date()==maturity_date){
                            model.addRow(new Object[]{obj.getName_of_product(),obj.getMaturity_date(),
                obj.getInitial_amount(),obj.getInterest_rate(),obj.getRecurring_payments()});
                                flag=true;
                                continue;
                        }
                    }
                     
                }
                }            
            }
            
            if(!flag){
                    jLabel5.setText("Данных с заданными параметрами не найдено");
                }
        }
        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(SearchCreditProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(SearchCreditProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(SearchCreditProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(SearchCreditProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                try {
//                    new SearchCreditProduct().setVisible(true);
//                } catch (IOException ex) {
//                    Logger.getLogger(SearchCreditProduct.class.getName()).log(Level.SEVERE, null, ex);
//                } catch (ClassNotFoundException ex) {
//                    Logger.getLogger(SearchCreditProduct.class.getName()).log(Level.SEVERE, null, ex);
//                }
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables
}
