/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client_;

import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author Benutzer
 */
public class SetExpertReview extends javax.swing.JFrame {

       private Map<String, CreditProduct> map = new HashMap<String, CreditProduct>();
       
       private String[] nameOfNewCredit=new String[4];
       ExpertReview review = new ExpertReview();
   
    /**
     * Creates new form SetExpertReview
     */
    public SetExpertReview() throws UnknownHostException, ClassNotFoundException, IOException {
        try {
            initComponents();

            Socket sock = new Socket(InetAddress.getByName("localhost"), 1024);
            
            OutputStream output = sock.getOutputStream();
            InputStream input =sock.getInputStream();
            
            ObjectOutputStream objoutput=new ObjectOutputStream(output);
            ObjectInputStream objinput=new ObjectInputStream(input);
            
            objoutput.writeObject(7);            
            int size = (int)objinput.readObject();
            
            if(size>0){
                
                for(int i=0;i<size;i++){
                CreditProduct credit=new CreditProduct();
                credit.setName_of_product((String) objinput.readObject());               
                credit.setMaturity_date((int) objinput.readObject());
                credit.setInitial_amount((double) objinput.readObject());
                credit.setInterest_rate((double) objinput.readObject());
                credit.setRecurring_payments((double) objinput.readObject());
                credit.setEarly_repayment((boolean)objinput.readObject());                                
                map.put(credit.getName_of_product(),credit);
            }
                 
           
                 review.setExpert_value((int)objinput.readObject());
                 review.setReview((double[][])objinput.readObject());
                 
                 DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
            
                 
            for(CreditProduct obj: map.values()){               
            model.addRow(new Object[]{obj.getName_of_product(),obj.getMaturity_date(),
                obj.getInitial_amount(),obj.getInterest_rate(),obj.getRecurring_payments(),obj.isEarly_repayment()});            
            }
            
            for(int i = 0 ;i < 4;i++){
                    nameOfNewCredit[i]=(String) jTable1.getValueAt(i,0);
                }
            
            jLabel1.setText(nameOfNewCredit[0]+" и "+ nameOfNewCredit[1]);
            jLabel2.setText(nameOfNewCredit[0]+" и "+ nameOfNewCredit[2]);
            jLabel3.setText(nameOfNewCredit[0]+" и "+ nameOfNewCredit[3]);
            jLabel4.setText(nameOfNewCredit[1]+" и "+ nameOfNewCredit[2]);
            jLabel5.setText(nameOfNewCredit[1]+" и "+ nameOfNewCredit[3]);
            jLabel6.setText(nameOfNewCredit[2]+" и "+ nameOfNewCredit[3]);
            
            if(review.getExpert_value()>3){
                JOptionPane.showMessageDialog(null, "Экспертные оценки уже проставлены!","Предупреждение",JOptionPane.ERROR_MESSAGE );
                jButton5.setEnabled(false);
            }
            
            }else  JOptionPane.showMessageDialog(null, "Отсутствует экспертная задача", "Ошибка",JOptionPane.ERROR_MESSAGE );
 
            objinput.close();
            objoutput.close();
            output.close();
            input.close();
            sock.close();
            
        } catch (IOException ex) {
            Logger.getLogger(SetExpertReview.class.getName()).log(Level.SEVERE, null, ex);
        }      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jTextField9 = new javax.swing.JTextField();
        jTextField10 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextField11 = new javax.swing.JTextField();
        jTextField12 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Выставление экспертных оценок");

        jTable1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Наименование кредитного продукта", "Срок погашения(дней)", "Начальная сумма(BYR)", "Процентная ставка(%)", "Размер периодических платежей(BYR)", "Возможность досрочного погашения"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N

        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jTextField6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField6ActionPerformed(evt);
            }
        });

        jTextField7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField7ActionPerformed(evt);
            }
        });

        jTextField8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField8ActionPerformed(evt);
            }
        });

        jTextField9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField9ActionPerformed(evt);
            }
        });

        jTextField10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField10ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N

        jTextField11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField11ActionPerformed(evt);
            }
        });

        jTextField12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField12ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jButton2.setText("Гистограмма начальной суммы кредитов");
        jButton2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jButton3.setText("Гистограмма процентных ставок кредитов");
        jButton3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jButton4.setText("Гистограмма размера периодических платежей");
        jButton4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton5.setText("Сохранить");
        jButton5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton6.setText("Назад");
        jButton6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44)
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 195, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(66, 66, 66)
                                        .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(63, 63, 63)
                                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(66, 66, 66))
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(138, 138, 138)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(132, 132, 132)
                                .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                            .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28))
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(103, 103, 103)))
                                .addGap(78, 78, 78))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(152, 152, 152))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(22, Short.MAX_VALUE))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       DefaultCategoryDataset dataset = new DefaultCategoryDataset();
    int flag = 0;
    
    if(!jTable1.getValueAt(0,2).equals("") && !jTable1.getValueAt(0,0).equals("")){
    dataset.addValue((double)jTable1.getValueAt(0,2), (String) jTable1.getValueAt(0,0), "Начальная сумма кредитов");
    flag++;
    }
    if(!jTable1.getValueAt(1,2).equals("") && !jTable1.getValueAt(1,0).equals("")){
    dataset.addValue((double)jTable1.getValueAt(1,2), (String) jTable1.getValueAt(1,0), "Начальная сумма кредитов");
    flag++;
    }
    if(!jTable1.getValueAt(2,2).equals("") && !jTable1.getValueAt(2,0).equals("")){
    dataset.addValue((double)jTable1.getValueAt(2,2), (String) jTable1.getValueAt(2,0), "Начальная сумма кредитов");
    flag++;
    }
    if(!jTable1.getValueAt(3,2).equals("") && !jTable1.getValueAt(3,0).equals("")){
    dataset.addValue((double)jTable1.getValueAt(3,2), (String) jTable1.getValueAt(3,0), "Начальная сумма кредитов");
    flag++;
    }
    
    if(flag>=2){
        JFreeChart chart = ChartFactory.createBarChart3D(
                      "Гистограмма начальной суммы кредитов", 
                      "Кредитные продукты",                   // x-axis label
                      "Начальная сумма кредита",                // y-axis label
                      dataset);  
        CategoryPlot plot = (CategoryPlot) chart.getPlot();
        ChartFrame frame = new ChartFrame("Начальная сумма кредитов",chart);
        frame.setVisible(true);
        frame.setSize(600, 500);
    }
    else JOptionPane.showMessageDialog(null, "Невозможно построить гистограмму. Недостаточно данных ", 
            "Ошибка построения гистограммы",JOptionPane.ERROR_MESSAGE );
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
         if(!jTextField6.getText().equals("")){
            jTextField5.setText("".valueOf((1 - Double.parseDouble(jTextField6.getText()))));
        }
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
           
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
    
        int flag = 0;
        
        if(!jTable1.getValueAt(0,3).equals("") && !jTable1.getValueAt(0,0).equals("")){
    dataset.addValue((double)jTable1.getValueAt(0,3), (String) jTable1.getValueAt(0,0), "Процентные ставки кредитов");
    flag++;
        }
        if(!jTable1.getValueAt(1,3).equals("") && !jTable1.getValueAt(1,0).equals("")){
    dataset.addValue((double)jTable1.getValueAt(1,3), (String) jTable1.getValueAt(1,0), "Процентные ставки кредитов");
    flag++;
        }
        if(!jTable1.getValueAt(2,3).equals("") && !jTable1.getValueAt(2,0).equals("")){
    dataset.addValue((double)jTable1.getValueAt(2,3), (String) jTable1.getValueAt(2,0), "Процентные ставки кредитов");
    flag++;
        }
        if(!jTable1.getValueAt(3,3).equals("") && !jTable1.getValueAt(3,0).equals("")){
    dataset.addValue((double)jTable1.getValueAt(3,3), (String) jTable1.getValueAt(3,0), "Процентные ставки кредитов");
    flag++;
        }
    
        if(flag>=2){
        JFreeChart chart = ChartFactory.createBarChart3D(
                      "Гистограмма процентных ставок кредитов", 
                      "Кредитные продукты",                   // x-axis label
                      "Процентная ставка кредита",                // y-axis label
                      dataset);  
        CategoryPlot plot = (CategoryPlot) chart.getPlot();
        ChartFrame frame = new ChartFrame("Процентные ставки кредитов",chart);
        frame.setVisible(true);
        frame.setSize(600, 500);
        }
        else JOptionPane.showMessageDialog(null, "Невозможно построить гистограмму. Недостаточно данных ", 
                "Ошибка построения гистограммы",JOptionPane.ERROR_MESSAGE );
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
               
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
    
        int flag = 0;
        
        if(!jTable1.getValueAt(0,4).equals("") && !jTable1.getValueAt(0,0).equals("")){
    dataset.addValue((double)jTable1.getValueAt(0,4), (String) jTable1.getValueAt(0,0), "Размер периодических плетежей");
    flag++;
        }
        if(!jTable1.getValueAt(1,4).equals("") && !jTable1.getValueAt(1,0).equals("")){
    dataset.addValue((double)jTable1.getValueAt(1,4), (String) jTable1.getValueAt(1,0), "Размер периодических плетежей");
    flag++;
        }
        if(!jTable1.getValueAt(2,4).equals("") && !jTable1.getValueAt(2,0).equals("")){
    dataset.addValue((double)jTable1.getValueAt(2,4), (String) jTable1.getValueAt(2,0), "Размер периодических плетежей");
    flag++;
        }
        if(!jTable1.getValueAt(3,4).equals("") && !jTable1.getValueAt(3,0).equals("")){
    dataset.addValue((double)jTable1.getValueAt(3,4), (String) jTable1.getValueAt(3,0), "Размер периодических плетежей");
    flag++;
        }
    
        if(flag>=2){
        JFreeChart chart = ChartFactory.createBarChart3D(
                      "Гистограмма периодических плетежей по кредитам", 
                      "Кредитные продукты",                   // x-axis label
                      "Размер периодических плетежей",        // y-axis label
                      dataset);  
        CategoryPlot plot = (CategoryPlot) chart.getPlot();
        ChartFrame frame = new ChartFrame("Размер периодических плетежей",chart);
        frame.setVisible(true);
        frame.setSize(600, 500);
        }
        else JOptionPane.showMessageDialog(null, "Невозможно построить гистограмму. Недостаточно данных ", 
                "Ошибка построения гистограммы",JOptionPane.ERROR_MESSAGE );
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
         if(!jTextField2.getText().equals("")){
            jTextField1.setText("".valueOf((1 - Double.parseDouble(jTextField2.getText()))));
        }
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        if(!jTextField1.getText().equals("")){
            jTextField2.setText("".valueOf(1 - Double.parseDouble(jTextField1.getText())));
        }
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
       if(!jTextField4.getText().equals("")){
            jTextField3.setText("".valueOf(1 - Double.parseDouble(jTextField4.getText())));
        }
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        if(!jTextField3.getText().equals("")){
            jTextField4.setText("".valueOf(1 - Double.parseDouble(jTextField3.getText())));
        }
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jTextField6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField6ActionPerformed
        if(!jTextField5.getText().equals("")){
            jTextField6.setText("".valueOf(1 - Double.parseDouble(jTextField5.getText())));
        }
    }//GEN-LAST:event_jTextField6ActionPerformed

    private void jTextField8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField8ActionPerformed
        if(!jTextField7.getText().equals("")){
            jTextField8.setText("".valueOf(1 - Double.parseDouble(jTextField7.getText())));
        }
    }//GEN-LAST:event_jTextField8ActionPerformed

    private void jTextField10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField10ActionPerformed
        if(!jTextField9.getText().equals("")){
            jTextField10.setText("".valueOf((1 - Double.parseDouble(jTextField9.getText()))));
        }
    }//GEN-LAST:event_jTextField10ActionPerformed

    private void jTextField12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField12ActionPerformed
        if(!jTextField11.getText().equals("")){
            jTextField12.setText("".valueOf((1 - Double.parseDouble(jTextField11.getText()))));
        }
    }//GEN-LAST:event_jTextField12ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        
        boolean flag = true;
        jLabel7.setText("");
        
        if(jTextField1.getText().equals("") || jTextField2.getText().equals("") ||
        Double.parseDouble(jTextField1.getText())+Double.parseDouble(jTextField2.getText())!=1){
            jLabel7.setText("Ошибка заполнения полей <<"+ jLabel1.getText()+">>");
            flag=false;
        }
         if(jTextField3.getText().equals("") || jTextField4.getText().equals("") ||
        Double.parseDouble(jTextField3.getText())+Double.parseDouble(jTextField4.getText())!=1){
            jLabel7.setText("Ошибка заполнения полей <<"+ jLabel2.getText()+">>");
            flag=false;
        }
          if(jTextField5.getText().equals("") || jTextField6.getText().equals("") ||
        Double.parseDouble(jTextField5.getText())+Double.parseDouble(jTextField6.getText())!=1){
            jLabel7.setText("Ошибка заполнения полей <<"+ jLabel3.getText()+">>");
            flag=false;
        }
           if(jTextField7.getText().equals("") || jTextField8.getText().equals("") ||
        Double.parseDouble(jTextField7.getText())+Double.parseDouble(jTextField8.getText())!=1){
            jLabel7.setText("Ошибка заполнения полей <<"+ jLabel4.getText()+">>");
            flag=false;
        }
            if(jTextField9.getText().equals("") || jTextField10.getText().equals("") ||
        Double.parseDouble(jTextField9.getText())+Double.parseDouble(jTextField10.getText())!=1){
            jLabel7.setText("Ошибка заполнения полей <<"+ jLabel5.getText()+">>");
            flag=false;
        }
             if(jTextField11.getText().equals("") || jTextField12.getText().equals("") ||
        Double.parseDouble(jTextField11.getText())+Double.parseDouble(jTextField12.getText())!=1){
            jLabel7.setText("Ошибка заполнения полей <<"+ jLabel6.getText()+">>");
            flag=false;
        }
        if(flag){
            try {
                Socket sock = new Socket(InetAddress.getByName("localhost"), 1024);
                
                OutputStream output = sock.getOutputStream();
                InputStream input =sock.getInputStream();
                
                ObjectOutputStream objoutput=new ObjectOutputStream(output);
                ObjectInputStream objinput=new ObjectInputStream(input);
                
                //заполнение строки матрицы
                review.setReview(review.getExpert_value(),0,Double.parseDouble(jTextField1.getText()));
                review.setReview(review.getExpert_value(),1,Double.parseDouble(jTextField2.getText()));
                review.setReview(review.getExpert_value(),2,Double.parseDouble(jTextField3.getText()));
                review.setReview(review.getExpert_value(),3,Double.parseDouble(jTextField4.getText()));
                review.setReview(review.getExpert_value(),4,Double.parseDouble(jTextField5.getText()));
                review.setReview(review.getExpert_value(),5,Double.parseDouble(jTextField6.getText()));
                review.setReview(review.getExpert_value(),6,Double.parseDouble(jTextField7.getText()));
                review.setReview(review.getExpert_value(),7,Double.parseDouble(jTextField8.getText()));
                review.setReview(review.getExpert_value(),8,Double.parseDouble(jTextField9.getText()));
                review.setReview(review.getExpert_value(),9,Double.parseDouble(jTextField10.getText()));
                review.setReview(review.getExpert_value(),10,Double.parseDouble(jTextField11.getText()));
                review.setReview(review.getExpert_value(),11,Double.parseDouble(jTextField12.getText()));
                review.ExpertValueIncrement();
                
                objoutput.writeObject(8);               
                objoutput.writeObject(review.getReview());
                objoutput.writeObject(review.getExpert_value());
                
                int result = (int)objinput.readObject();
                if(result != 1){
                    JOptionPane.showMessageDialog(null, "Ошибка на стороне сервера", "Ошибка",JOptionPane.ERROR_MESSAGE );
                }          
                objinput.close();
                objoutput.close();
                output.close();
                input.close();
                sock.close();
                
                this.dispose();
            } catch (UnknownHostException ex) {
                Logger.getLogger(SetExpertReview.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(SetExpertReview.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(SetExpertReview.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTextField7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField7ActionPerformed
         if(!jTextField8.getText().equals("")){
            jTextField7.setText("".valueOf(1 - Double.parseDouble(jTextField8.getText())));
        }
    }//GEN-LAST:event_jTextField7ActionPerformed

    private void jTextField9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField9ActionPerformed
        if(!jTextField10.getText().equals("")){
            jTextField9.setText("".valueOf(1 - Double.parseDouble(jTextField10.getText())));
        }
    }//GEN-LAST:event_jTextField9ActionPerformed

    private void jTextField11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField11ActionPerformed
        if(!jTextField12.getText().equals("")){
            jTextField11.setText("".valueOf(1 - Double.parseDouble(jTextField11.getText())));
        }
    }//GEN-LAST:event_jTextField11ActionPerformed

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(SetExpertReview.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(SetExpertReview.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(SetExpertReview.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(SetExpertReview.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                try {
//                    new SetExpertReview().setVisible(true);
//                } catch (UnknownHostException ex) {
//                    Logger.getLogger(SetExpertReview.class.getName()).log(Level.SEVERE, null, ex);
//                } catch (ClassNotFoundException ex) {
//                    Logger.getLogger(SetExpertReview.class.getName()).log(Level.SEVERE, null, ex);
//                } catch (IOException ex) {
//                    Logger.getLogger(SetExpertReview.class.getName()).log(Level.SEVERE, null, ex);
//                }
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    // End of variables declaration//GEN-END:variables
}
